import*as THREE from 'three';import{MindARThree}from 'mindar-face-three';import{createToneCircles,highlightAISuggestedTone,getCurrentTone,updateUISelection,tones}from './tones.js';import{WedgeChart}from './wedge.js';import{FaceObject}from './faceObject.js';import{FaceDots}from './faceDots.js';import{DisplayMode}from './displayMode.js';import{storeToneChoices,storeRefusal}from './firebase.js';import{debug,isClaude,CLAUDE_MODEL,GPT_MODEL,SYSTEM_PROMPT,AI_PROMPT,DISPLAY_SETTINGS,API_ENDPOINTS,FACE_ANCHOR_POINTS,CANVAS_SETTINGS,storeImages,showDebugUI}from './config.js';let mindAR,renderer,scene,camera;const faceObjects=[];const facialAnchors=[];let currentDisplayMode=DisplayMode[DISPLAY_SETTINGS.DEFAULT_DISPLAY_MODE];const minSwipeDistance=DISPLAY_SETTINGS.MIN_SWIPE_DISTANCE;const videoElement=document.getElementById('webcam');const container=document.getElementById('container');const sendToAIButton=document.getElementById('send-to-ai');const getAverageColorsButton=document.getElementById('get-average-colors');const loadingAnimation=document.getElementById('loading-animation');const averageColorCircle=document.getElementById('average-color-circle');const saveButton=document.getElementById('save-data');const termsModal=document.getElementById('terms-modal');const acceptTermsButton=document.getElementById('accept-terms');const declineTermsButton=document.getElementById('decline-terms');const thankYouModal=document.getElementById('thank-you-modal');const userToneText=document.getElementById('user-tone-text');const aiToneText=document.getElementById('ai-tone-text');let startX=0;let endX=0;const modeButton=document.getElementById('mode-button');let capturedData={apiImage:null,fullResImage:null,userTone:null,aiTone:null,aiResponse:null};const instructionPanel=document.getElementById('instruction-panel');const instructionText=document.getElementById('instruction-text');const instructionNext=document.getElementById('instruction-next');let isToneSelected=!1;let isInPosition=!1;const instructions=[{text:"Position your face inside the oval and hold still. Press next to continue.",action:()=>{handleSendToAI();instructionPanel.classList.add('hidden')}},{text:"Select your preferred tone from the options. Press next to continue.",action:async()=>{instructionPanel.classList.add('hidden');try{await storeCapturedData();userToneText.textContent=capturedData.userTone.toUpperCase()||'no tone';aiToneText.textContent=capturedData.aiTone.toUpperCase()||'no tone';thankYouModal.classList.remove('hidden');capturedData={apiImage:null,fullResImage:null,userTone:null,aiTone:null,aiResponse:null};checkCapturedData();sendToAIButton.disabled=!0;sendToAIButton.classList.add('button-disabled')}catch(error){console.error('Error saving data:',error)}}}];let currentInstructionIndex=0;const showInstruction=(index)=>{if(index<instructions.length){instructionText.textContent=instructions[index].text;instructionPanel.classList.remove('hidden');if(index===0){instructionNext.disabled=!isInPosition;instructionNext.classList.toggle('button-disabled',!isInPosition)}else if(index===1){instructionNext.disabled=!isToneSelected;instructionNext.classList.toggle('button-disabled',!isToneSelected)}else{instructionNext.disabled=!1;instructionNext.classList.remove('button-disabled')}}else{instructionPanel.classList.add('hidden')}};instructionNext.addEventListener('click',()=>{if(currentInstructionIndex<instructions.length){oval.classList.add('hidden');const currentToneData=getCurrentTone();capturedData.userTone=currentToneData?.tone?.name||null;if(instructions[currentInstructionIndex].action){instructions[currentInstructionIndex].action()}
if(currentInstructionIndex===1){instructionPanel.classList.add('hidden');userToneText.textContent=capturedData.userTone||'no tone';aiToneText.textContent=capturedData.aiTone||'no tone';thankYouModal.classList.remove('hidden');sendToAIButton.disabled=!0;sendToAIButton.classList.add('button-disabled')}}});const rgbToHex=(r,g,b)=>{return `#${((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1)}`};const getScreenPosition=(object,camera)=>{const vector=new THREE.Vector3();object.getWorldPosition(vector);vector.project(camera);const canvas=renderer.domElement;const x=(vector.x+1)/2*canvas.width;const y=(-vector.y+1)/2*canvas.height;return{x:Math.floor(x),y:Math.floor(y)}};const scaleImage=(sourceCanvas,targetWidth,targetHeight)=>{const scaledCanvas=document.createElement('canvas');scaledCanvas.width=targetWidth;scaledCanvas.height=targetHeight;const ctx=scaledCanvas.getContext('2d');ctx.imageSmoothingEnabled=!0;ctx.imageSmoothingQuality='high';ctx.drawImage(sourceCanvas,0,0,targetWidth,targetHeight);return scaledCanvas};function createFaceObject(scene,camera,renderer){switch(currentDisplayMode){case DisplayMode.WEDGE:return new WedgeChart(scene,camera,renderer);case DisplayMode.FACEDOTS:return new FaceDots(scene,camera,renderer);default:return new FaceObject(scene,camera,renderer)}}
function addFaceObject(anchorIndex){const newObject=createFaceObject(scene,camera,renderer);newObject.setupEventListeners();facialAnchors[anchorIndex].group.add(newObject.group);faceObjects.push(newObject);return newObject}
function initializeWebcam(){navigator.mediaDevices.getUserMedia({video:!0}).then(stream=>{videoElement.srcObject=stream}).catch(error=>{console.error('Error accessing webcam:',error)})}
function initializeMindAR(){mindAR=new MindARThree({container:container,});renderer=mindAR.renderer;scene=mindAR.scene;camera=mindAR.camera}
function setupFacialAnchors(){for(let index=0;index<468;index++){const anchor=mindAR.addAnchor(index);facialAnchors.push(anchor)}
if(currentDisplayMode===DisplayMode.WEDGE){const wedge=addFaceObject(FACE_ANCHOR_POINTS.WEDGE_ANCHOR);wedge.group.visible=!1}else{FACE_ANCHOR_POINTS.DOT_ANCHORS.forEach(anchorPoint=>{const dots=addFaceObject(anchorPoint);dots.setDefaultTone(0)})}}
function setCameraPosition(){camera.position.z=DISPLAY_SETTINGS.CAMERA_POSITION_Z}
const showLoading=()=>{loadingAnimation.classList.remove('loading-hidden');let loadingText=document.querySelector('.loading-text');if(!loadingText){loadingText=document.createElement('div');loadingText.innerText='Analysing Face';loadingText.className='loading-text';loadingAnimation.appendChild(loadingText)}};const hideLoading=()=>{loadingAnimation.classList.add('loading-hidden')};const handleGetAverageColors=(event)=>{getSampleFaceColors()};const handleSwipeGesture=()=>{const distance=endX-startX;if(Math.abs(distance)>minSwipeDistance){if(distance<0){faceObjects.forEach(obj=>obj.swipeLeft())}else{faceObjects.forEach(obj=>obj.swipeRight())}}};const handleTouchStart=(event)=>{startX=event.touches[0].clientX};const handleTouchMove=(event)=>{endX=event.touches[0].clientX};const handleTouchEnd=()=>{handleSwipeGesture()};const handleMouseDown=(event)=>{startX=event.clientX};const handleMouseMove=(event)=>{endX=event.clientX};const handleMouseUp=()=>{handleSwipeGesture()};const handleSendToAI=async()=>{sendToAIButton.disabled=!0;sendToAIButton.classList.add('button-disabled');showLoading();faceObjects.forEach(obj=>{if(obj instanceof WedgeChart&&obj.group.visible){obj.animateWedgesOut()}});try{await captureScreenshot();await new Promise(resolve=>setTimeout(resolve,2000));console.log('AI response received and processed')}catch(error){console.error('Error processing AI request:',error);displayText('Error processing AI request')}};const toggleDisplayMode=(mode)=>{if(mode==='wedge'){currentDisplayMode=DisplayMode.WEDGE}else if(mode==='dots'){currentDisplayMode=DisplayMode.FACEDOTS}else{return}
faceObjects.forEach(obj=>{const anchorGroup=obj.group.parent;if(anchorGroup){anchorGroup.remove(obj.group)}});faceObjects.length=0;if(currentDisplayMode===DisplayMode.WEDGE){const wedge=addFaceObject(FACE_ANCHOR_POINTS.WEDGE_ANCHOR);wedge.animateSlicesToNewDistribution(0)}else{for(let i of[0,100,200,300]){const dots=addFaceObject(i);dots.setDefaultTone(0)}}
updateUISelection(0);highlightSelectedMode(mode)};const highlightSelectedMode=(selectedMode)=>{const modeOptions=document.querySelectorAll('.mode-option');modeOptions.forEach(option=>{if(option.getAttribute('data-mode')===selectedMode){option.classList.add('selected')}else{option.classList.remove('selected')}})};const handleKeyDown=(event)=>{if(event.code==='Space'){event.preventDefault();toggleDisplayMode()}};modeButton.addEventListener('click',()=>{toggleDisplayMode()});function setupEventListeners(){getAverageColorsButton.addEventListener('click',handleGetAverageColors);sendToAIButton.removeAttribute('disabled');sendToAIButton.addEventListener('click',handleSendToAI);container.addEventListener('touchstart',handleTouchStart,!1);container.addEventListener('touchmove',handleTouchMove,!1);container.addEventListener('touchend',handleTouchEnd,!1);container.addEventListener('mousedown',handleMouseDown,!1);container.addEventListener('mousemove',handleMouseMove,!1);container.addEventListener('mouseup',handleMouseUp,!1);document.addEventListener('keydown',handleKeyDown);const modeButton=document.getElementById('mode-button');const modeDropdownContent=document.querySelector('.mode-dropdown-content');modeButton.addEventListener('click',(e)=>{e.preventDefault();const isOpen=modeButton.classList.contains('menu-open');modeButton.classList.toggle('menu-open');if(!isOpen){setTimeout(()=>{modeDropdownContent.classList.add('visible')},150)}else{modeDropdownContent.classList.remove('visible')}});document.querySelectorAll('.mode-option').forEach(item=>{item.addEventListener('click',(e)=>{e.preventDefault();e.stopPropagation();const selectedMode=e.currentTarget.getAttribute('data-mode');toggleDisplayMode(selectedMode)})});document.addEventListener('click',(e)=>{if(!e.target.closest('.mode-dropdown')){modeButton.classList.remove('menu-open');modeDropdownContent.classList.remove('visible')}});highlightSelectedMode(currentDisplayMode===DisplayMode.WEDGE?'wedge':'dots')}
const startAR=async()=>{await mindAR.start();const oval=document.getElementById('oval');renderer.setAnimationLoop(()=>{renderer.render(scene,camera);const centerAnchor=facialAnchors[19];if(centerAnchor){const vector=new THREE.Vector3();centerAnchor.group.getWorldPosition(vector);const distanceX=vector.x-camera.position.x;const absDistance=Math.abs(distanceX);isInPosition=absDistance<3;oval.classList.toggle('in-position',isInPosition);if(currentInstructionIndex===0){instructionNext.disabled=!isInPosition;instructionNext.classList.toggle('button-disabled',!isInPosition)}}
faceObjects.forEach(obj=>{obj.update()})})};const uploadImageToServer=async(base64Image)=>{try{const response=await fetch(base64Image);const blob=await response.blob();const filename=`capture_${Date.now()}.png`;const imageUrl=`https://hotknife.co.uk/imageuploader_1/uploads/${filename}`;console.log('Image URL:',imageUrl);const formData=new FormData();formData.append('image',blob,filename);fetch('https://hotknife.co.uk/imageuploader_1/upload.php',{method:'POST',body:formData}).catch(error=>console.error('PHP upload error:',error));console.log('Generated image URL:',imageUrl);return imageUrl}catch(error){console.error('Error preparing image:',error);return null}};const captureScreenshot=async()=>{const offscreenCanvas=document.createElement('canvas');offscreenCanvas.width=renderer.domElement.width;offscreenCanvas.height=renderer.domElement.height;const ctx=offscreenCanvas.getContext('2d');ctx.translate(offscreenCanvas.width,0);ctx.scale(-1,1);ctx.drawImage(videoElement,0,0,offscreenCanvas.width,offscreenCanvas.height);ctx.setTransform(1,0,0,1,0,0);const topPoint=getScreenPosition(facialAnchors[10].group,camera);const bottomPoint=getScreenPosition(facialAnchors[152].group,camera);const faceHeight=bottomPoint.y-topPoint.y;const padding=faceHeight*0.2;const cropX=Math.max(0,topPoint.x-faceHeight/2);const cropY=Math.max(0,topPoint.y-padding);const cropWidth=Math.min(faceHeight,offscreenCanvas.width-cropX);const cropHeight=Math.min(faceHeight+padding*2,offscreenCanvas.height-cropY);const croppedCanvas=document.createElement('canvas');croppedCanvas.width=cropWidth;croppedCanvas.height=cropHeight;const croppedCtx=croppedCanvas.getContext('2d');croppedCtx.drawImage(offscreenCanvas,cropX,cropY,cropWidth,cropHeight,0,0,cropWidth,cropHeight);renderer.render(scene,camera);const rendererImage=new Image();rendererImage.src=renderer.domElement.toDataURL('image/png');rendererImage.onload=async()=>{const fullResBase64=offscreenCanvas.toDataURL('image/png');const scaledCanvas=scaleImage(croppedCanvas,CANVAS_SETTINGS.API_IMAGE_SIZE,CANVAS_SETTINGS.API_IMAGE_SIZE);const scaledBase64Image=scaledCanvas.toDataURL('image/png');const scaledBase64ForAPI=scaledBase64Image.split(',')[1];capturedData.apiImage=scaledBase64Image;capturedData.fullResImage=fullResBase64;checkCapturedData();let responseText;if(debug){responseText="Based on the image swatch provided, this person's skin tone mostly closely resembles: Raven";await new Promise(resolve=>setTimeout(resolve,3000))}else{const swatchImg=new Image();swatchImg.crossOrigin="Anonymous";try{await new Promise((resolve,reject)=>{swatchImg.onload=resolve;swatchImg.onerror=reject;swatchImg.src='swatch.png'});const swatchCanvas=document.createElement('canvas');swatchCanvas.width=swatchImg.width;swatchCanvas.height=swatchImg.height;const swatchCtx=swatchCanvas.getContext('2d');swatchCtx.drawImage(swatchImg,0,0);const scaledSwatchCanvas=scaleImage(swatchCanvas,CANVAS_SETTINGS.API_IMAGE_SIZE,CANVAS_SETTINGS.API_IMAGE_SIZE);const scaledBase64Swatch=scaledSwatchCanvas.toDataURL('image/png').split(',')[1];responseText=await sendToVisionAPIMulti(scaledBase64ForAPI,scaledBase64Swatch)}catch(error){console.error('Error processing swatch image:',error);return}}
if(responseText){await displayTextWithImage(responseText,fullResBase64)}else{await displayTextWithImage('No response from Vision API',fullResBase64)}}};const getSampleFaceColors=async()=>{const offscreenCanvas=document.createElement('canvas');offscreenCanvas.width=renderer.domElement.width;offscreenCanvas.height=renderer.domElement.height;const ctx=offscreenCanvas.getContext('2d');ctx.translate(offscreenCanvas.width,0);ctx.scale(-1,1);ctx.drawImage(videoElement,0,0,offscreenCanvas.width,offscreenCanvas.height);ctx.setTransform(1,0,0,1,0,0);const imageData=ctx.getImageData(0,0,offscreenCanvas.width,offscreenCanvas.height);let totalR=0,totalG=0,totalB=0,count=0;facialAnchors.forEach((anchor)=>{const{x,y}=getScreenPosition(anchor.group,camera);if(x>=0&&x<offscreenCanvas.width&&y>=0&&y<offscreenCanvas.height){const pixelIndex=(y*offscreenCanvas.width+x)*4;const r=imageData.data[pixelIndex];const g=imageData.data[pixelIndex+1];const b=imageData.data[pixelIndex+2];const hexColor=rgbToHex(r,g,b);const cube=anchor.group.children.find(child=>child instanceof THREE.Mesh);if(cube){cube.material.color.set(hexColor)}
totalR+=r;totalG+=g;totalB+=b;count++}});if(count>0){const avgR=Math.round(totalR/count);const avgG=Math.round(totalG/count);const avgB=Math.round(totalB/count);const averageHex=rgbToHex(avgR,avgG,avgB);updateAverageColorCircle(averageHex)}};const sendToVisionAPIMulti=async(base64Image1,base64Image2)=>{try{console.log('Sending images to API:',{image1Length:base64Image1.length,image2Length:base64Image2.length});const endpoint=isClaude?API_ENDPOINTS.CLAUDE_VISION:API_ENDPOINTS.VISION_API_MULTI;const model=isClaude?CLAUDE_MODEL:GPT_MODEL;const response=await fetch(endpoint,{method:'POST',headers:{"Content-Type":"application/json"},body:JSON.stringify({base64Image1,base64Image2,prompt:AI_PROMPT,model:model,systemPrompt:SYSTEM_PROMPT})});if(!response.ok){const errorText=await response.text();console.error('API Error:',errorText);throw new Error(`HTTP error! status: ${response.status}`)}
const data=await response.json();console.log('API Response:',data);return data.content}catch(error){console.error('Error sending images to Vision API:',error);return null}};const displayText=(text)=>{hideLoading();const existingTexts=document.querySelectorAll('.displayed-text');existingTexts.forEach(element=>element.remove());const textContainer=document.createElement('div');textContainer.innerText=text;textContainer.className='displayed-text';const dismissBtn=document.createElement('span');dismissBtn.innerText=' X';dismissBtn.className='dismiss-btn';dismissBtn.onclick=()=>{textContainer.remove();sendToAIButton.disabled=!1;sendToAIButton.classList.remove('button-disabled')};textContainer.appendChild(dismissBtn);document.body.appendChild(textContainer)};const storeCapturedData=async()=>{try{let uploadedImageUrl=null;if(storeImages){uploadedImageUrl=await uploadImageToServer(capturedData.apiImage);console.log('Image upload result:',uploadedImageUrl)}
console.log('About to store in Firebase:',{userTone:capturedData.userTone,aiTone:capturedData.aiTone,uploadedImageUrl,aiResponse:capturedData.aiResponse});await storeToneChoices(capturedData.userTone,capturedData.aiTone,uploadedImageUrl,capturedData.aiResponse);console.log('Successfully stored in Firebase with image URL:',uploadedImageUrl);return uploadedImageUrl}catch(error){console.error('Error storing captured data:',error);return null}};const displayTextWithImage=async(text,imageUrl)=>{hideLoading();const suggestedToneName=extractToneName(text);const currentToneData=getCurrentTone();capturedData.userTone=currentToneData?.tone?.name||null;capturedData.aiTone=suggestedToneName;capturedData.aiResponse=text;checkCapturedData();const suggestedTone=tones.find(tone=>tone.name.toUpperCase()===suggestedToneName.toUpperCase());const colorHex=suggestedTone?suggestedTone.hex:'#FFFFFF';const modal=document.getElementById('result-modal');const resultImage=document.getElementById('result-image');const resultText=document.getElementById('result-text');const colorLine=document.getElementById('result-color-line');const toneName=document.getElementById('result-tone-name');const continueButton=document.getElementById('submit-result');const retryButton=document.getElementById('retry-result');resultImage.src=imageUrl;if(suggestedToneName&&!hasErrorKeywords(text)){resultText.textContent=`The fabric most suited for this person is ${suggestedToneName}`;continueButton.style.display='block';retryButton.style.display='none'}else{resultText.textContent='Sorry, something went wrong, please retry';continueButton.style.display='none';retryButton.style.display='block';if(capturedData.apiImage){let uploadedImageUrl=null;if(storeImages){uploadedImageUrl=await uploadImageToServer(capturedData.apiImage)}
await storeRefusal(uploadedImageUrl,text)}}
colorLine.style.backgroundColor=colorHex;toneName.textContent=suggestedToneName||'';modal.classList.remove('hidden');continueButton.onclick=()=>{modal.classList.add('hidden');document.querySelector('.mode-dropdown').classList.add('visible');document.getElementById('tone-circles').classList.add('visible');faceObjects.forEach(obj=>{obj.group.visible=!0});currentInstructionIndex=1;showInstruction(currentInstructionIndex)};retryButton.onclick=()=>{oval.classList.remove('hidden');modal.classList.add('hidden');sendToAIButton.disabled=!1;sendToAIButton.classList.remove('button-disabled');faceObjects.forEach(obj=>{obj.group.visible=!1});faceObjects.forEach(obj=>{if(obj instanceof WedgeChart){obj.animateWedgesIn()}});currentInstructionIndex=0;showInstruction(currentInstructionIndex)};highlightAISuggestedTone(suggestedToneName);checkAndLogTone(text)};const extractToneName=(text)=>{const validTones=tones.map(tone=>tone.name.toLowerCase());const foundTone=validTones.find(tone=>text.toLowerCase().includes(tone.toLowerCase()));return foundTone?foundTone.charAt(0).toUpperCase()+foundTone.slice(1):''};const updateAverageColorCircle=(color)=>{averageColorCircle.style.backgroundColor=color};const checkAndLogTone=(text)=>{const toneName=extractToneName(text);if(toneName){highlightAISuggestedTone(toneName);console.log('AI suggested tone:',toneName)}};const checkCapturedData=()=>{const isComplete=capturedData.apiImage!==null&&capturedData.fullResImage!==null&&capturedData.userTone!==null&&capturedData.aiTone!==null;saveButton.disabled=!isComplete;if(isComplete){saveButton.classList.remove('button-disabled')}else{saveButton.classList.add('button-disabled')}};saveButton.addEventListener('click',async()=>{saveButton.disabled=!0;saveButton.classList.add('button-disabled');try{await storeCapturedData();capturedData={apiImage:null,fullResImage:null,userTone:null,aiTone:null,aiResponse:null};checkCapturedData()}catch(error){console.error('Error saving data:',error);saveButton.disabled=!1;saveButton.classList.remove('button-disabled')}});const initializeDebugUI=()=>{if(showDebugUI){document.querySelectorAll('.debug-ui').forEach(element=>{element.classList.add('visible')});document.querySelector('.button-row').classList.add('visible')}};document.addEventListener('DOMContentLoaded',()=>{termsModal.classList.remove('hidden');acceptTermsButton.addEventListener('click',()=>{termsModal.classList.add('hidden');initializeDebugUI();initializeWebcam();initializeMindAR();setupFacialAnchors();setCameraPosition();setupEventListeners();createToneCircles();startAR();document.querySelector('.mode-dropdown').classList.remove('visible');document.getElementById('tone-circles').classList.remove('visible');currentInstructionIndex=0;showInstruction(currentInstructionIndex);const ovalInstructionModal=document.getElementById('oval-instruction-modal');ovalInstructionModal.classList.remove('hidden');document.getElementById('understand-oval').addEventListener('click',()=>{ovalInstructionModal.classList.add('hidden')})});declineTermsButton.addEventListener('click',()=>{alert('You must accept the terms to use this application.')});document.getElementById('start-over').addEventListener('click',()=>{window.location.reload()})});window.updateNextButtonState=(selected)=>{isToneSelected=selected;if(currentInstructionIndex===1){instructionNext.disabled=!selected;instructionNext.classList.toggle('button-disabled',!selected)}};const handleToneSelection=(toneIndex)=>{updateNextButtonState(!0)};const handleToneDeselection=()=>{updateNextButtonState(!1)};const hasErrorKeywords=(text)=>{const errorKeywords=['sorry','apologize','unable','cannot',"can't"];const lowerText=text.toLowerCase();return errorKeywords.some(keyword=>lowerText.includes(keyword))}