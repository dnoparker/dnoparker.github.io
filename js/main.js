import*as THREE from"three";import{MindARThree}from"mindar-face-three";import{createToneCircles,highlightAISuggestedTone,getCurrentTone,updateUISelection,tones}from"./tones.js";import{WedgeChart}from"./wedge.js";import{FaceObject}from"./faceObject.js";import{FaceDots}from"./faceDots.js";import{DisplayMode}from"./displayMode.js";import{storeToneChoices}from"./firebase.js";import{debug,isClaude,CLAUDE_MODEL,GPT_MODEL,SYSTEM_PROMPT,AI_PROMPT,DISPLAY_SETTINGS,API_ENDPOINTS,FACE_ANCHOR_POINTS,CANVAS_SETTINGS,storeImages}from"./config.js";let mindAR,renderer,scene,camera;const faceObjects=[],facialAnchors=[];let currentDisplayMode=DisplayMode[DISPLAY_SETTINGS.DEFAULT_DISPLAY_MODE];const minSwipeDistance=DISPLAY_SETTINGS.MIN_SWIPE_DISTANCE,videoElement=document.getElementById("webcam"),container=document.getElementById("container"),sendToAIButton=document.getElementById("send-to-ai"),getAverageColorsButton=document.getElementById("get-average-colors"),loadingAnimation=document.getElementById("loading-animation"),averageColorCircle=document.getElementById("average-color-circle");let startX=0,endX=0;const modeButton=document.getElementById("mode-button"),rgbToHex=(r,g,b)=>`#${((1<<24)+(r<<16)+(g<<8)+b).toString(16).slice(1)}`,getScreenPosition=(object,camera)=>{const vector=new THREE.Vector3;object.getWorldPosition(vector),vector.project(camera);const canvas=renderer.domElement,x=(vector.x+1)/2*canvas.width,y=(1-vector.y)/2*canvas.height;return{x:Math.floor(x),y:Math.floor(y)}},loadImageAsBase64=async imagePath=>{const response=await fetch(imagePath),blob=await response.blob();return new Promise((resolve,reject)=>{const reader=new FileReader;reader.onloadend=()=>resolve(reader.result.split(",")[1]),reader.onerror=reject,reader.readAsDataURL(blob)})},scaleImage=(sourceCanvas,targetWidth,targetHeight)=>{const scaledCanvas=document.createElement("canvas");scaledCanvas.width=targetWidth,scaledCanvas.height=targetHeight;const ctx=scaledCanvas.getContext("2d");return ctx.imageSmoothingEnabled=!0,ctx.imageSmoothingQuality="high",ctx.drawImage(sourceCanvas,0,0,targetWidth,targetHeight),scaledCanvas};function createFaceObject(scene,camera,renderer){switch(currentDisplayMode){case DisplayMode.WEDGE:return new WedgeChart(scene,camera,renderer);case DisplayMode.FACEDOTS:return new FaceDots(scene,camera,renderer);default:return new FaceObject(scene,camera,renderer)}}function addFaceObject(anchorIndex){const newObject=createFaceObject(scene,camera,renderer);return newObject.setupEventListeners(),facialAnchors[anchorIndex].group.add(newObject.group),faceObjects.push(newObject),newObject}function initializeWebcam(){navigator.mediaDevices.getUserMedia({video:!0}).then(stream=>{videoElement.srcObject=stream}).catch(error=>{console.error("Error accessing webcam:",error)})}function initializeMindAR(){mindAR=new MindARThree({container:container}),renderer=mindAR.renderer,scene=mindAR.scene,camera=mindAR.camera}function setupFacialAnchors(){for(let index=0;index<468;index++){const anchor=mindAR.addAnchor(index);facialAnchors.push(anchor)}currentDisplayMode===DisplayMode.WEDGE?addFaceObject(FACE_ANCHOR_POINTS.WEDGE_ANCHOR):FACE_ANCHOR_POINTS.DOT_ANCHORS.forEach(anchor=>{addFaceObject(anchor)})}function setCameraPosition(){camera.position.z=DISPLAY_SETTINGS.CAMERA_POSITION_Z}const showLoading=()=>{loadingAnimation.classList.remove("loading-hidden");let loadingText=document.querySelector(".loading-text");loadingText||(loadingText=document.createElement("div"),loadingText.innerText="Analysing Face",loadingText.className="loading-text",loadingAnimation.appendChild(loadingText))},hideLoading=()=>{loadingAnimation.classList.add("loading-hidden")},handleGetAverageColors=event=>{getSampleFaceColors()},handleSwipeGesture=()=>{const distance=endX-startX;Math.abs(distance)>minSwipeDistance&&(distance<0?faceObjects.forEach(obj=>obj.swipeLeft()):faceObjects.forEach(obj=>obj.swipeRight()))},handleTouchStart=event=>{startX=event.touches[0].clientX},handleTouchMove=event=>{endX=event.touches[0].clientX},handleTouchEnd=()=>{handleSwipeGesture()},handleMouseDown=event=>{startX=event.clientX},handleMouseMove=event=>{endX=event.clientX},handleMouseUp=()=>{handleSwipeGesture()},handleSendToAI=async()=>{sendToAIButton.disabled=!0,sendToAIButton.classList.add("button-disabled"),showLoading(),faceObjects.forEach(obj=>{obj instanceof WedgeChart&&obj.animateWedgesOut()});try{await captureScreenshot(),await new Promise(resolve=>setTimeout(resolve,2e3)),console.log("AI response received and processed")}catch(error){console.error("Error processing AI request:",error),displayText("Error processing AI request")}},toggleDisplayMode=mode=>{if("wedge"===mode)currentDisplayMode=DisplayMode.WEDGE;else{if("dots"!==mode)return;currentDisplayMode=DisplayMode.FACEDOTS}if(faceObjects.forEach(obj=>{const anchorGroup=obj.group.parent;anchorGroup&&anchorGroup.remove(obj.group)}),faceObjects.length=0,currentDisplayMode===DisplayMode.WEDGE){const wedge=addFaceObject(200);wedge.animateSlicesToNewDistribution(0)}else for(let i of[0,100,200,300]){const dots=addFaceObject(i);dots.setDefaultTone(0)}updateUISelection(0),highlightSelectedMode(mode)},highlightSelectedMode=selectedMode=>{const modeOptions=document.querySelectorAll(".mode-option");modeOptions.forEach(option=>{option.getAttribute("data-mode")===selectedMode?option.classList.add("selected"):option.classList.remove("selected")})},handleKeyDown=event=>{"Space"===event.code&&(event.preventDefault(),toggleDisplayMode())};function setupEventListeners(){getAverageColorsButton.addEventListener("click",handleGetAverageColors),sendToAIButton.removeAttribute("disabled"),sendToAIButton.addEventListener("click",handleSendToAI),container.addEventListener("touchstart",handleTouchStart,!1),container.addEventListener("touchmove",handleTouchMove,!1),container.addEventListener("touchend",handleTouchEnd,!1),container.addEventListener("mousedown",handleMouseDown,!1),container.addEventListener("mousemove",handleMouseMove,!1),container.addEventListener("mouseup",handleMouseUp,!1),document.addEventListener("keydown",handleKeyDown);const modeButton=document.getElementById("mode-button"),modeDropdownContent=document.querySelector(".mode-dropdown-content");modeButton.addEventListener("click",e=>{e.preventDefault();const isOpen=modeButton.classList.contains("menu-open");modeButton.classList.toggle("menu-open"),isOpen?modeDropdownContent.classList.remove("visible"):setTimeout(()=>{modeDropdownContent.classList.add("visible")},150)}),document.querySelectorAll(".mode-option").forEach(item=>{item.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation();const selectedMode=e.currentTarget.getAttribute("data-mode");toggleDisplayMode(selectedMode)})}),document.addEventListener("click",e=>{e.target.closest(".mode-dropdown")||(modeButton.classList.remove("menu-open"),modeDropdownContent.classList.remove("visible"))}),highlightSelectedMode(currentDisplayMode===DisplayMode.WEDGE?"wedge":"dots")}modeButton.addEventListener("click",()=>{toggleDisplayMode()});const startAR=async()=>{await mindAR.start(),renderer.setAnimationLoop(()=>{renderer.render(scene,camera);const faceLandmarks=mindAR.getFaceLandmarks();faceObjects.forEach(obj=>{obj instanceof FaceDots?obj.update(faceLandmarks):obj.update()})})},uploadImageToServer=async base64Image=>{try{const response=await fetch(base64Image),blob=await response.blob(),filename=`capture_${Date.now()}.png`,imageUrl=`https://hotknife.co.uk/imageuploader_1/uploads/${filename}`,formData=new FormData;return formData.append("image",blob,filename),fetch("https://hotknife.co.uk/imageuploader_1/upload.php",{method:"POST",body:formData}).catch(error=>console.error("PHP upload error:",error)),console.log("Generated image URL:",imageUrl),imageUrl}catch(error){return console.error("Error preparing image:",error),null}},captureScreenshot=async()=>{const offscreenCanvas=document.createElement("canvas");offscreenCanvas.width=renderer.domElement.width,offscreenCanvas.height=renderer.domElement.height;const ctx=offscreenCanvas.getContext("2d");ctx.translate(offscreenCanvas.width,0),ctx.scale(-1,1),ctx.drawImage(videoElement,0,0,offscreenCanvas.width,offscreenCanvas.height),ctx.setTransform(1,0,0,1,0,0),renderer.render(scene,camera);const rendererImage=new Image;rendererImage.src=renderer.domElement.toDataURL("image/png"),rendererImage.onload=async()=>{const fullResBase64=offscreenCanvas.toDataURL("image/png"),scaledCanvas=scaleImage(offscreenCanvas,CANVAS_SETTINGS.API_IMAGE_SIZE,CANVAS_SETTINGS.API_IMAGE_SIZE),scaledBase64Image=scaledCanvas.toDataURL("image/png"),scaledBase64ForAPI=scaledBase64Image.split(",")[1];let uploadedImageUrl=null,responseText;if(storeImages&&(uploadedImageUrl=await uploadImageToServer(scaledBase64Image),console.log("Image upload result:",uploadedImageUrl)),debug)responseText="Based on the image swatch provided, this person's skin tone mostly closely resembles: Raven",await new Promise(resolve=>setTimeout(resolve,3e3));else{const swatchImg=new Image;swatchImg.crossOrigin="Anonymous";try{await new Promise((resolve,reject)=>{swatchImg.onload=resolve,swatchImg.onerror=reject,swatchImg.src="swatch.png"});const swatchCanvas=document.createElement("canvas");swatchCanvas.width=swatchImg.width,swatchCanvas.height=swatchImg.height;const swatchCtx=swatchCanvas.getContext("2d");swatchCtx.drawImage(swatchImg,0,0);const scaledSwatchCanvas=scaleImage(swatchCanvas,CANVAS_SETTINGS.API_IMAGE_SIZE,CANVAS_SETTINGS.API_IMAGE_SIZE),scaledBase64Swatch=scaledSwatchCanvas.toDataURL("image/png").split(",")[1];responseText=await sendToVisionAPIMulti(scaledBase64ForAPI,scaledBase64Swatch)}catch(error){return void console.error("Error processing swatch image:",error)}}responseText?await displayTextWithImage(responseText,fullResBase64,uploadedImageUrl):await displayTextWithImage("No response from Vision API",fullResBase64,uploadedImageUrl)}},getSampleFaceColors=async()=>{const offscreenCanvas=document.createElement("canvas");offscreenCanvas.width=renderer.domElement.width,offscreenCanvas.height=renderer.domElement.height;const ctx=offscreenCanvas.getContext("2d");ctx.translate(offscreenCanvas.width,0),ctx.scale(-1,1),ctx.drawImage(videoElement,0,0,offscreenCanvas.width,offscreenCanvas.height),ctx.setTransform(1,0,0,1,0,0);const imageData=ctx.getImageData(0,0,offscreenCanvas.width,offscreenCanvas.height);let totalR=0,totalG=0,totalB=0,count=0;if(facialAnchors.forEach(anchor=>{const{x:x,y:y}=getScreenPosition(anchor.group,camera);if(x>=0&&x<offscreenCanvas.width&&y>=0&&y<offscreenCanvas.height){const pixelIndex=4*(y*offscreenCanvas.width+x),r=imageData.data[pixelIndex],g=imageData.data[pixelIndex+1],b=imageData.data[pixelIndex+2],hexColor=rgbToHex(r,g,b),cube=anchor.group.children.find(child=>child instanceof THREE.Mesh);cube&&cube.material.color.set(hexColor),totalR+=r,totalG+=g,totalB+=b,count++}}),count>0){const avgR=Math.round(totalR/count),avgG=Math.round(totalG/count),avgB=Math.round(totalB/count),averageHex=rgbToHex(avgR,avgG,avgB);updateAverageColorCircle(averageHex)}},sendToVisionAPIMulti=async(base64Image1,base64Image2)=>{try{console.log("Sending images to API:",{image1Length:base64Image1.length,image2Length:base64Image2.length});const endpoint=isClaude?API_ENDPOINTS.CLAUDE_VISION:API_ENDPOINTS.VISION_API_MULTI,model=isClaude?CLAUDE_MODEL:GPT_MODEL,response=await fetch(endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({base64Image1:base64Image1,base64Image2:base64Image2,prompt:AI_PROMPT,model:model,systemPrompt:SYSTEM_PROMPT})});if(!response.ok){const errorText=await response.text();throw console.error("API Error:",errorText),new Error(`HTTP error! status: ${response.status}`)}const data=await response.json();return console.log("API Response:",data),data.content}catch(error){return console.error("Error sending images to Vision API:",error),null}},displayText=text=>{hideLoading();const existingTexts=document.querySelectorAll(".displayed-text");existingTexts.forEach(element=>element.remove());const textContainer=document.createElement("div");textContainer.innerText=text,textContainer.className="displayed-text";const dismissBtn=document.createElement("span");dismissBtn.innerText=" X",dismissBtn.className="dismiss-btn",dismissBtn.onclick=()=>{textContainer.remove(),sendToAIButton.disabled=!1,sendToAIButton.classList.remove("button-disabled")},textContainer.appendChild(dismissBtn),document.body.appendChild(textContainer)},displayTextWithImage=async(text,imageUrl,uploadedImageUrl=null)=>{hideLoading();const existingTexts=document.querySelectorAll(".displayed-text");existingTexts.forEach(element=>element.remove());const suggestedToneName=extractToneName(text),suggestedTone=tones.find(tone=>tone.name.toUpperCase()===suggestedToneName.toUpperCase()),colorHex=suggestedTone?suggestedTone.hex:"#FFFFFF";let userSelectedTone="UNKNOWN";try{const currentToneData=getCurrentTone();currentToneData&&currentToneData.tone&&(userSelectedTone=currentToneData.tone.name,console.log("Selected tone:",userSelectedTone))}catch(error){console.error("Error getting selected tone:",error)}console.log("About to store in Firebase:",{userSelectedTone:userSelectedTone,suggestedToneName:suggestedToneName,uploadedImageUrl:uploadedImageUrl});try{await storeToneChoices(userSelectedTone,suggestedToneName,uploadedImageUrl),console.log("Successfully stored in Firebase with image URL:",uploadedImageUrl)}catch(error){console.error("Error storing tone choices:",error)}const textContainer=document.createElement("div");textContainer.className="displayed-text";const imageContainer=document.createElement("div");imageContainer.className="image-container";const img=document.createElement("img");img.src=imageUrl,img.className="captured-image",imageContainer.appendChild(img);const colorLine=document.createElement("div");colorLine.className="color-line",colorLine.style.backgroundColor=colorHex;const toneName=document.createElement("div");toneName.className="tone-name",toneName.textContent=suggestedToneName,colorLine.appendChild(toneName),imageContainer.appendChild(colorLine),textContainer.appendChild(imageContainer);const textElement=document.createElement("p");textElement.innerText=text,textContainer.appendChild(textElement);const dismissBtn=document.createElement("span");dismissBtn.innerText="×",dismissBtn.className="dismiss-btn",dismissBtn.onclick=()=>{textContainer.remove();const sendToAIButton=document.getElementById("send-to-ai");sendToAIButton&&(sendToAIButton.disabled=!1,sendToAIButton.classList.remove("button-disabled")),faceObjects.forEach(obj=>{obj instanceof WedgeChart&&obj.animateWedgesIn()})},textContainer.appendChild(dismissBtn),document.body.appendChild(textContainer),highlightAISuggestedTone(suggestedToneName),checkAndLogTone(text)},extractToneName=text=>{const match=text.match(/most suited for this person is (\w+)/i);return match?match[1].trim():""},updateAverageColorCircle=color=>{averageColorCircle.style.backgroundColor=color},checkAndLogTone=text=>{const toneName=extractToneName(text);toneName&&(highlightAISuggestedTone(toneName),console.log("AI suggested tone:",toneName))};document.addEventListener("DOMContentLoaded",()=>{initializeWebcam(),initializeMindAR(),setupFacialAnchors(),setCameraPosition(),setupEventListeners(),createToneCircles(),startAR()});